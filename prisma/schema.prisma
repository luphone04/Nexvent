// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ATTENDEE
  ORGANIZER
  ADMIN
}

enum EventCategory {
  CONFERENCE
  WORKSHOP
  SEMINAR
  SOCIAL
  SPORTS
  CONCERT
  MEETUP
  TRAINING
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum RegistrationStatus {
  REGISTERED
  WAITLISTED
  CANCELLED
  ATTENDED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  phone         String?
  organization  String?
  bio           String?
  interests     String[] // Array of event categories they're interested in
  role          UserRole @default(ATTENDEE)
  avatarUrl     String?  @map("avatar_url")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  organizedEvents Event[]        @relation("EventOrganizer")
  registrations   Registration[]
  accounts        Account[]
  sessions        Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Event {
  id          String        @id @default(cuid())
  title       String
  description String?
  eventDate   DateTime      @map("event_date")
  eventTime   String?       @map("event_time") // Time as string (e.g., "14:30")
  location    String
  capacity    Int
  category    EventCategory
  ticketPrice Decimal       @default(0) @map("ticket_price") @db.Money
  imageUrl    String?       @map("image_url")
  status      EventStatus   @default(DRAFT)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  organizerId   String         @map("organizer_id")
  organizer     User           @relation("EventOrganizer", fields: [organizerId], references: [id], onDelete: Cascade)
  registrations Registration[]

  // Indexes
  @@index([eventDate])
  @@index([category])
  @@index([status])
  @@index([organizerId])
  @@map("events")
}

model Registration {
  id                  String            @id @default(cuid())
  registrationDate    DateTime          @default(now()) @map("registration_date")
  status              RegistrationStatus @default(REGISTERED)
  paymentStatus       PaymentStatus     @default(PENDING) @map("payment_status")
  checkInCode         String            @unique @default(cuid()) @map("check_in_code")
  checkInTime         DateTime?         @map("check_in_time")
  waitlistPosition    Int?              @map("waitlist_position")
  specialRequirements String?           @map("special_requirements")
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")

  // Relations
  eventId    String @map("event_id")
  event      Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  attendeeId String @map("attendee_id")
  attendee   User   @relation(fields: [attendeeId], references: [id], onDelete: Cascade)

  // Constraints
  @@unique([eventId, attendeeId]) // Prevent duplicate registrations
  @@index([eventId])
  @@index([attendeeId])
  @@index([status])
  @@index([checkInCode])
  @@map("registrations")
}